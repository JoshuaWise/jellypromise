High priority (for next release):
- it's possible for stream to leave unhandled rejected promises if:
  - takeUntil is used, or shortcut() in reduce is used, and they end the stream
    before all items were processed
  - an error occurs, which ends the stream before all items are processed
- add tests for PromiseStream
- add to README that reduce's shortcut() accepts promises
- errors(), which returns this, and provided a loop-back mechanism for handling
  data errors that enter pass through the stream


Not as high priority:
- ensure long stack traces for every way PromiseStream could get rejected
- add long stack trace tests
- get zuul tests working


Server optimizations:
- make use of private handleNew/resolve/reject functions, instead of using new Promise() with closures, to speed up methods and static functions.
- add optimized case for .catch() with single predicate.
- use fake promise class (e.g., PromiseArray) OR PromiseStream for Promise.all and similar functions.
- make sure to maintain the same long stack traces as with deoptimized versions.




Double check:
- that all prototype methods that generate a new, linked promise, use _handleNew, _handle, or _then, so that `this` promise sets SUPPRESS_UNHANDLED_REJECTIONS to 1


Stream considerations:
- implement sort()


Related TODO:
- Generator Runner (seperate module)
